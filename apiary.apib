FORMAT: 1A
HOST: https://paperc.com/api

# PaperC B2B API documentation

This is an in-depth documentation of the PaperC Business-2-Business API.

__Please note:__ If you are watching this documentation on [apiary.io](https://apiary.io), internal links to paranthesis will not work due to Apiary's cut back Markdown implementation.  
Alternatively use the documentation hosted on [PaperC.com](https://paperc.com/docs).

# Glossary

* JWT: JSON Web Token

# General API usage

* __Encoding__  
All transmitted data should be `UTF-8` encoded.
* __Media types__  
Requests should always contain `application/x-www-form-urlencoded` data.  
Endpoints will always return `application/json` data.
* __Authorization HTTP headers__  
Whenever authorization by a JWT is required, the JWT must be send in the Authorization HTTP header declaring the mechanism as `JWT` (e.g. `JWT your.foo.token`).

# Pagination

Some endpoints may return a large set of results (e.g. lists of books). To keep response times low, those endpoints will return __paginated data__.

A paginated result may look like this:

```javascript
{
  'count': 13,
  'next': 'https://foo.bar/endpoint?page=2',
  'previous': null,
  'results': [
    {
      'foo': 'bar'
    },
    ...
  ]
}
```

`count` states the total amount of results.

`next` states the URL that will return the next set of results (may be `null` if there is no next set). Note the `page=x` URL parameter.

`previous` states the URL that will return the previous set of results (may be `null` if there is no previous set). Note the `page=x` URL parameter.

`results` states the actual results of the current pagination set as an array of JSON objects.

Although we fit all paginated endpoints with sane default pagination sizes you may want to change the size of a pagination set.  
To do so, add the `page_size=x` parameter to the URL.

# Filtering and Ordering

__Filtering__ an endpoint can be achieved by adding a filter expression as a parameter to the URL.  
A filter expression consists of the field's name you want to filter by, followed by a double undercore, followed by the lookup type, followed by an equals sign, followed by the threshold value. A few examples:

`age__gte=21` will list any record where `age` is __greater or equals to__ 21.

`last_name__startswith=Do` will list any record where `last_name` __starts with__ 'Do'.

`last_name=Doe` will list any record where `last_name` is __exactly__ 'Doe'.

If you know the Django Web Framework, this will look very familiar to you. A list of all available lookup types can be found [here](https://docs.djangoproject.com/en/1.8/ref/models/querysets/#field-lookups).

__Ordering__ can be achieved by adding the parameter `ordering=fieldname` to the URL. A few examples:

`ordering=last_name` will order the result by __asceding__ last names.

`ordering=-last_name` will order the result by __descending__ last names.

You also may use multiple fields to refine ordering:

`ordering=-last_name,first_name` will order the result by __descending__ last names and __ascending__ first names.

# Group Common tasks and workflows
This is a step-by-step guide for a number of common tasks and worklows that you might encounter when working with our API.

## Automated user login
To make all features of PaperC available to your customer and deliver him an overall much better user experience, it's a good idead to use our automated user login system whenever you redirect a customer to out platform (e.g. to our shop or the epub reader).

1. [Retrieve a user JWT](#authentication-obtain-a-new-user-jwt-post) for your customer.
2. Include the retrieved JWT in the `Authorization` header of your redirecting request. Our platform will recognize the token and automatically log in the asociated user!

## Obtain book lists
Book lists contain a lot of detailed information about our books that you may want to process for your own customers.  
Check out the detailed endpoint descriptions to see sample results.

1. [Retrieve your JWT](#authentication-obtain-a-new-jwt-post)
2. `GET` [/api/booklists](#book-lists-get-all-available-book-lists-get)
3. `GET` [/api/booklist/{booklist_id}](#book-lists-get-a-particular-book-list-get)

## Offer a book to your customers
Books obtained via a book list have (amongst others) a `public_url` and a `detail_url` that you can redirect your customers to.

1. [Obtain a book list](#header-obtain-book-lists) you want to work with.
2. Redirect your user to `https://paperc.com/<public_or_detail_url>`.  
   _Hint_: This is a good opportunity to make use of our [automated login system](#header-automated-user-login)!

# Group Authentication

## Obtain a new JWT [POST /auth/client_jwt/obtain]
Retrieve a JWT that will authenticate you as an eligible B2B user on any other endpoint.

+ Request (application/x-www-form-urlencoded)

        secret_key=mysecretkey
        
+ Response 200 (application/json)
            
    + Body
    
            {
                "token": "your.foo.token"
            }

+ Response 400 (application/json)
            
    + Body
    
            {
                "detail": {
                    "code": "SOME_ERROR_CODE",
                    "message": "A detailed description of what went wrong."
                }
            }

+ Response 403 (application/json)
            
    + Body
    
            {
                "detail": {
                    "code": "SOME_ERROR_CODE",
                    "message": "A detailed description of what went wrong."
                }
            }

## Obtain a new user JWT [POST /auth/client_jwt/obtain_user_token]
Retrieve a JWT for one of your users. The user will be created if unknown at [paperc.com](https://paperc.com), assuming this is part of our cooperation agreement.

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Authorization: JWT your.foo.token
    
    + Attributes
    
        + user_email (required, string) - The user's email address.
        + user_language (optional, string) - The user's language. Must be 'de' or 'en'. Defaults to 'de'.
        + user_country (optional, string) - The user's country. Must be an ISO 3166-1 alpha-2 literal. Defaults to 'DE'.
    
    + Body
    
            user_email=mail@user.com
            user_language=en
            user_Country=US
        
+ Response 200 (application/json)
            
    + Body
    
            {
                "token": "your.foo.token"
            }

+ Response 400 (application/json)
            
    + Body
    
            {
                "detail": {
                    "code": "SOME_ERROR_CODE",
                    "message": "A detailed description of what went wrong."
                }
            }

+ Response 403 (application/json)
            
    + Body
    
            {
                "detail": {
                    "code": "SOME_ERROR_CODE",
                    "message": "A detailed description of what went wrong."
                }
            }

# Group Book lists

## Get all available book lists [GET /booklists]
Retrieve a list of all book lists available to you.

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Authorization: JWT your.foo.token

+ Response 200 (application/json)
            
    + Attributes
    
        + id: (required, number) - The unique id of the book list.
        + name: (required, string) - The name of the book list.
        + description: (required, string) - A short description of the book list.
        + book_count: (required, number) - The amount of books in the book list.
        + url: (required, string) - The URL to retrieve the book list.
    
    + Body
    
            {
                "id": 1,
                "name": "John Doe's book list",
                "description": "This book list contains books about John's favorite subjects."
                "book_count": 15,
                "url": "/api/booklists/1"
            }

+ Response 403 (application/json)
            
    + Body
    
            {
                "detail": {
                    "code": "SOME_ERROR_CODE",
                    "message": "A detailed description of what went wrong."
                }
            }

## Get a particular book list [GET /booklists/{booklist_id}]
Retrieve a particular book list to view the books inside.

+ Parameters

    + booklist_id: (required, number) - The unique id of the book list.

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Authorization: JWT your.foo.token

+ Response 200 (application/json)
            
    + Attributes
    
        + id: (required, number) - The unique id of the book list.
        + name: (required, string) - The name of the book list.
        + description: (required, string) - A short description of the book list.
        + books: (required, object) - A paginated enumeration of books as JSON objects.
    
    + Body
    
            {
                "id": 1,
                "name": "John Doe's book list",
                "description": "This book list contains books about John's favorite subjects."
                "books": {
                    "count": 15,
                    "results": {
                        {
                            "pk": 21465,
                            "title": "The Foo Bar Book",
                            "isbn": "9780745637167",
                            "author: "John Doe",
                            "description": "A book about all the Foo Bar in John Doe's life.",
                            "cover_image_url": "/path/to/image",
                            "cover_image_thumbnail_url": "/path/to/thumbnail",
                            "public_url": "path/to/book/in/reader",
                            "detail_url": "path/to/book/details"
                        },
                        ...
                    }
                    "links": {
                        "previous": null,
                        "next": null
                    }
                }
            }

+ Response 403 (application/json)
            
    + Body
    
            {
                "detail": {
                    "code": "SOME_ERROR_CODE",
                    "message": "A detailed description of what went wrong."
                }
            }